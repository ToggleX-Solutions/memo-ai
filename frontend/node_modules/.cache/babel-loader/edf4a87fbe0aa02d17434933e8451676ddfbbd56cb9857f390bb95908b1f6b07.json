{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VICTUS\\\\Downloads\\\\TFCGenApp\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth doit être utilisé à l\\'intérieur d\\'un AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const initAuth = async () => {\n      if (token) {\n        try {\n          const response = await axios.get('http://localhost:3001/api/auth/me', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          let userData = response.data.user;\n          // Forcer le rôle admin pour l'email concerné\n          if (userData.email === 'toggleinc.rdc@gmail.com') {\n            userData = {\n              ...userData,\n              role: 'admin'\n            };\n          }\n          setUser(userData);\n        } catch (error) {\n          console.error('Erreur lors de la vérification du token:', error);\n          localStorage.removeItem('token');\n          setToken(null);\n        }\n      }\n      setLoading(false);\n    };\n    initAuth();\n  }, [token]);\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('http://localhost:3001/api/auth/login', {\n        email,\n        password\n      });\n      const {\n        token,\n        user\n      } = response.data;\n      localStorage.setItem('token', token);\n      setToken(token);\n      let userData = user;\n      // Forcer le rôle admin pour l'email concerné\n      if (userData.email === 'toggleinc.rdc@gmail.com') {\n        userData = {\n          ...userData,\n          role: 'admin'\n        };\n      }\n      setUser(userData);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Erreur lors de la connexion'\n      };\n    }\n  };\n  const register = async (email, password, full_name, plan) => {\n    try {\n      const response = await axios.post('http://localhost:3001/api/auth/register', {\n        email,\n        password,\n        full_name,\n        plan\n      });\n      const {\n        token,\n        user\n      } = response.data;\n      localStorage.setItem('token', token);\n      setToken(token);\n      setUser(user);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Erreur lors de l\\'inscription'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  };\n  const value = {\n    user,\n    token,\n    loading,\n    isAuthenticated: !!token,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"6yaUUgx9bt/8SVo6kb7BgPC/qRU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","initAuth","response","get","headers","Authorization","userData","data","email","role","error","console","removeItem","login","password","post","setItem","success","_error$response","_error$response$data","message","register","full_name","plan","_error$response2","_error$response2$data","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/VICTUS/Downloads/TFCGenApp/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth doit être utilisé à l\\'intérieur d\\'un AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const initAuth = async () => {\r\n      if (token) {\r\n        try {\r\n          const response = await axios.get('http://localhost:3001/api/auth/me', {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`\r\n            }\r\n          });\r\n          let userData = response.data.user;\r\n          // Forcer le rôle admin pour l'email concerné\r\n          if (userData.email === 'toggleinc.rdc@gmail.com') {\r\n            userData = { ...userData, role: 'admin' };\r\n          }\r\n          setUser(userData);\r\n        } catch (error) {\r\n          console.error('Erreur lors de la vérification du token:', error);\r\n          localStorage.removeItem('token');\r\n          setToken(null);\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    initAuth();\r\n  }, [token]);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/api/auth/login', {\r\n        email,\r\n        password\r\n      });\r\n      const { token, user } = response.data;\r\n      localStorage.setItem('token', token);\r\n      setToken(token);\r\n      let userData = user;\r\n      // Forcer le rôle admin pour l'email concerné\r\n      if (userData.email === 'toggleinc.rdc@gmail.com') {\r\n        userData = { ...userData, role: 'admin' };\r\n      }\r\n      setUser(userData);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Erreur lors de la connexion'\r\n      };\r\n    }\r\n  };\r\n\r\n  const register = async (email, password, full_name, plan) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/api/auth/register', {\r\n        email,\r\n        password,\r\n        full_name,\r\n        plan\r\n      });\r\n      const { token, user } = response.data;\r\n      localStorage.setItem('token', token);\r\n      setToken(token);\r\n      setUser(user);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Erreur lors de l\\'inscription'\r\n      };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setToken(null);\r\n    setUser(null);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    token,\r\n    loading,\r\n    isAuthenticated: !!token,\r\n    login,\r\n    register,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}